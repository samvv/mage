# The Revolv Programming Language
#
# This grammar defines a generic re-targettable language, to be used as an
# intermediatary language for code generation.

# Tokens

@keyword
pub token name
  = [a-z_]i [a-z0-9]i*

pub boolean
  = 'true'
  | 'false'

pub token integer
  = '0' | [1-9] [0-9]*

pub token string
  = '"' (!'"' any_char)* '"'

# Shared parse rules

block
  = '{' elements:body_element* last:expr? '}'

# Patterns

pub named_patt
  = name

pub tuple_patt
  = '(' elements:(patt % ',') ')'

pub variant_patt
  = name '(' members:(type_expr % ',') ')'

pub patt
  = named_patt
  | variant_patt

# Expressions

pub assign_expr
  = patt ':=' expr

pub block_expr
  = block

pub break_expr
  = 'break' expr?

pub call_expr
  = expr '(' args:(expr % ',') ')'

pub cond_case
  = test:expr '=>' expr

pub cond_expr
  = 'cond' '{' cases:cond_case+ '}'

pub lit_expr
  = literal:(string | integer | boolean)

pub loop_expr
  = 'loop' block

pub new_expr
  = 'new' name '(' args:(expr % ',') ')'

pub match_arm
  = patt '=>' expr

# TDOO make the last ',' optional
pub match_expr
   = 'match' expr '{' arms:(match_arm  ',')+ '}'

pub path_expr
  = name

pub ref_expr
  = '&' expr

pub ret_expr
  = 'return' expr?

pub expr
  = assign_expr
  | block_expr
  | break_expr
  | call_expr
  | cond_expr
  | lit_expr
  | loop_expr
  | path_expr
  | ref_expr
  | ret_expr

# Type expressions

pub array_type_expr
  = '[' type_expr ';' expr ']'

pub path_type_expr
  = name

pub ref_type_expr
  = '&' type_expr

pub type_expr
  = path_type_expr
  | ref_type_expr
  | array_type_expr

# Declarations

pub field
  = name ':' type_expr

pub struct_decl
  = 'struct' name '{' (field % ',') '}'

pub variant
  = name '(' type_expr ')'

pub enum_decl
  = 'enum' name '{' (variant % ',') '}'

pub body_element
  = base_element
  | expr_stmt

pub var_decl
  = 'let' 'mut'? patt ':' type_expr init:('=' expr)?

pub func_decl
  = name self_type:('for' type_expr)? '{' body:body_element* '}'

pub expr_stmt
  = expr ';'

base_element
  = enum_decl
  | struct_decl
  | var_decl
  | func_decl
  | module_decl

pub module_element
  = base_element

pub module_decl
  = 'mod' name '{' elements:module_element* '}'

# Top-level parsing rules

pub source_element
  = base_element

pub source_file
  = elements:source_element*

